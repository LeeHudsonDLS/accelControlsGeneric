# digitelMpc.proto
# Stream Device Protocol for Gamma Vacuum Digitel MPC and MPCq
# This protocol uses features defined in Stream Device 2
#
# This protocol file has been adapted from the original digitelMpc.proto.
#
# Methods succeeded by "_q" have been added to allow support of the MPCq controller
# but are currently not used. The separate digitelMpcq.proto file must be used for
# for the MPCq controller but they will eventually be merged.
#
# Ian Gillingham, January 2020
# Lee Hudson, May 2020
#
# Message format is:
#      <START>" "<ADR>" "<CMD>" "<DATA>" "<CKSUM><TERM>
# where
#      <START> : Start character(1 byte) = '~'
#      <ADR>   : Address(2 bytes) - address of unit in hex (defalut = 05)
#      <CMD>   : Command code (2 bytes) - hex
#      <DATA>  : Optional - depends on <CMD>
#      <CHK>   : Checksum (2 bytes) - hex
#      <TERM>  : Terminator character (1 byte) = '\r'
#
# Reply format is:
#      <ADR>" "<STA>" "<CODE>" "<DATA>" "<CKSUM><TERM>
# where
#      <ADR>   : Address(2 bytes) - address of unit in hex (default = 05)
#      <STA>   : Status Mnemonic(2 bytes) "OK" or "ER"
#      <CODE>  : Response code(2 bytes) Error number
#      <DATA>  : Optional - depends on <CMD>
#      <CHK>   : Checksum (2 bytes) - hex
#      <TERM>  : Terminator character (1 byte) = '\r'#
#
# Arguments:
# $1 = address: (2 hex digits - default 05){1|2|3|4}
# $2 = parameter: (ion pump/filament (1,2,3 or 4)


locktimeout = 5000;
terminator   = CR;
replytimeout = 1000;
readtimeout  = 1000;
extrainput   = Ignore;

#
# Controller Protocols
#
model       {   out "~ \$1 01 %01<sum8>";
                in  "\$1 OK %*2x DIGITEL %{MPC DD|MPCe|MPCq|QPC} %0<sum8>";
                @mismatch { in "%*42c\$1 OK %*2x DIGITEL %{MPC DD|MPCe|MPCq|QPC} %14<sum8>";}
            }

version     {   out "~ \$1 02 %01<sum8>";
                in  "\$1 OK %*2x %*s %*s %s %0<sum8>";
                @mismatch { in "%*42c\$1 OK %*2x %*s %*s %s %14<sum8>";}
            }

linev       {   out "~ \$1 22 %01<sum8>";
                in  "\$1 OK %*2x %d %0<sum8>";
            }

linef       {   out "~ \$1 24 %01<sum8>";
                in  "\$1 OK %*2x %d Hz %*?/\(.*\) /%0<sum8>";
            }

autost      {   out "~ \$1 34 %01<sum8>";
                in  "\$1 OK %*2x %{NO|YES} %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?s %0<sum8>";}
            }

setlinev    {   out "~ \$1 23 %d %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }

fan         {   out "~ \$1 32 %{OFF|ON} %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }

setautost   {   out "~ \$1 33 %{NO|YES} %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }

reset       {   out "~ \$1 07 %01<sum8>";
            }

#
# Ion Pump Protocols
#
current     {   out "~ \$1 0A \$2 %01<sum8>";
                in  "\$1 OK %*2x %g %*{AMPS|Amps} %0<sum8>";
            }

pressure    {   out "~ \$1 0B \$2 %01<sum8>";
                in  "\$1 OK %*2x %g %*s %0<sum8>";
            }

voltage     {   out "~ \$1 0C \$2 %01<sum8>";
                in  "\$1 OK %*2x %d %0<sum8>";
            }

strap       {   out "~ \$1 20 \$2 %01<sum8>";
                in  "\$1 OK %*2x %d %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?s %0<sum8>";}
            }

status      {   out "~ \$1 0D \$2 %01<sum8>";
                in  "\$1 OK %*2x %{X|W|ST|SA|R|CO|P|H|I|SH|CA}%*s %*2x %0<sum8>";
                @mismatch { in "\$1 OK %*2x %{X|W|ST|SA|R|CO|P|H|I|SH|CA}";}
            }

err         {   out "~ \$1 0D \$2,00 %01<sum8>";
                in  "\$1 OK %*2x %*[^0-9]%d %0<sum8>";
            }

size        {   out "~ \$1 11 \$2 %01<sum8>";
                in  "\$1 OK %*2x %d L/S %0<sum8>";
            }

cal         {   out "~ \$1 1D \$2 %01<sum8>";
                in  "\$1 OK %*2x %f %0<sum8>";
            }

#
# Protection Setpoint Commands
# Parameter 1) Unit number   2) Device base name    3) Logical setpoint number for this pump (1 | 2).
# It is important to derive the setpoint set value at iocInit, so consider using @init handler.
# 
getsps      {   out "~ \$1 3C %(\$2:SPNUM\$3)1d %01<sum8>";
			    in  "\$1 OK %*2x %*i,%*i,%(\$2:SP\$3ON.VAL)g,%(\$2:SP\$3OFF.VAL)g,%(\$2:SP\$3STATE)i %0<sum8>";
			    @mismatch { in "\$1 OK %*2x %*i,%*i,%?g,%?g,%*i %0<sum8>";} 
		    }

#MPCq
getsps_q    {   out "~ \$1 3B %(\$2:SPNUM\$3)1d %01<sum8>";
			    in  "\$1 OK %*2x %*i,%*i,%*i,%(\$2:SP\$3ON.VAL)g,%(\$2:SP\$3OFF.VAL)g,%(\$2:SP\$3STATE)i %0<sum8>";
			    @mismatch { in "\$1 OK %*2x %*i,%*i,%?g,%?g,%*i %0<sum8>";} 
		    }

		  
setsps      {   out "~ \$1 3D %(F)1d,%(C)1d,%(A)2.2E,%(B)2.02E %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?g %0<sum8>";}
            }

#MPCq		  
setsps_q    {   out "~ \$1 3B %(F)1d,%(C)1d,%(A)2.2E,%(B)2.02E %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?g %0<sum8>";}
            }


setsize     {   out "~ \$1 12 \$2,%d %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }

setcal      {   out "~ \$1 1E \$2,%4.2f %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }


# ignore errors from old syle units that do not implement this protocol
settext     {   out "~ \$1 ED \$2,\"%s\" %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

start       {   out "~ \$1 %{38|37} \$2 %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

#
# TSP Protocols
#
tspsta      {   out "~ \$1 DE %01<sum8>";
                in "\$1 OK %*2x %d: %#*s"; 
                @mismatch { in "\$1 OK %*2x *ERROR: %#*s";}
            }

#MPCq
tspsta_q    {   out "~ \$1 DE %(\$2:RELAY.VAL)d,0 %01<sum8>";
                in "\$1 OK %*2x %2x %0<sum8>";
            }

# Purposely eat everything after the status code, as the strung returns may have multiple words and
# almost impossible to isolate a variable number of word responses. With this technique we lose the checksum
# check but get the correct code without error.
filsta      {   out "~ \$1 E9 \$2 %01<sum8>"; 
                in "\$1 OK %*2x %{1|2|3|4|5|6|*ERROR}: %#*s"; 
            }

#MPCq
filsta_q    {   out "~ \$1 E9 %(\$2)d %01<sum8>";
                in "\$1 OK %*2x %{01: NOT INSTALLED|02: INACTIVE|03: NEXT ACTIVE|04: FIRING|05: OPENING|06: LOW LEVEL} %0<sum8>";
            }

power       {   out "~ \$1 74 %01<sum8>";
                in "\$1 OK %*2x %?g %*c %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?g %0<sum8>";}
            }

fil         {   out "~ \$1 DA %01<sum8>";
                in "\$1 OK %*2x %{1|2|3|4} %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?d %0<sum8>";}
            }

#MPCq
fil_q       {   out "~ \$1 DF %(\$2:RELAY.VAL)d %01<sum8>";
                in "\$1 OK %*2x %{1|2|3|4} %0<sum8>";
                @mismatch { in "\$1 OK %*2x %?d %0<sum8>";}
            }


left        {   out "~ \$1 2A %01<sum8>"; 
                in "\$1 OK %*2x %d," "1-%(\$2:FIL1:USED.VAL)d," "2-%(\$2:FIL2:USED.VAL)d," "3-%(\$2:FIL3:USED.VAL)d," "4-%(\$2:FIL4:USED.VAL)d %0<sum8>"; 
                @mismatch { in "\$1 OK %*2x %?d %0<sum8>";} 
            }

setpower    {   out "~ \$1 E2 %d,W %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

autofil     {   out "~ \$1 2C %{NO|YES} %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

ctlsrc      {   out "~ \$1 8B %d %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
            }

#MPCq
ctlsrc_q    {   out "~ \$1 8B %(\$2:RELAY.VAL)d,%d %01<sum8>";
                in  "\$1 OK %*2x %0<sum8>";
                @mismatch { in "\$1 ER %*2x %(\$2:ERROR.VAL)#s";}
            }

#MPCq
get_ctlsrc_q  {   out "~ \$1 8C %(\$2:RELAY.VAL)d,0 %01<sum8>";
                in  "\$1 OK %*2x %{0|1|2|3|4} %0<sum8>";
            }

set_upper_thresh    {   out "~ \$1 EA %(\$2:RELAY.VAL)d,%3.1E %01<sum8>";
                        in  "\$1 OK %*2x %0<sum8>";
                    }

set_lower_thresh    {   out "~ \$1 EB %(\$2:RELAY.VAL)d,%3.1E %01<sum8>";
                        in  "\$1 OK %*2x %0<sum8>";
                    }

get_upper_thresh    {   out "~ \$1 82 %(\$2:RELAY.VAL)d %01<sum8>";
                        in  "\$1 OK %*2x %g %*s %0<sum8>";
                        @mismatch { in "\$1 OK %*2x %*g %*g";}
                    }

get_lower_thresh    {   out "~ \$1 31 %(\$2:RELAY.VAL)d %01<sum8>";
                        in  "\$1 OK %*2x %g %*s %0<sum8>";
                        @mismatch { in "\$1 OK %*2x %*g %*g";}
                    }

setfil      {   out "~ \$1 29 %{1|2|3|4} %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }
#MPCq
setfil_q    {   out "~ \$1 29 %(\$2:RELAY.VAL)d,%{1|2|3|4} %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

tspoff      {   out "~ \$1 28 %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }
#MPCq
tspoff_q    {   out "~ \$1 28 %(\$2:RELAY.VAL)d %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

clear       {   out "~ \$1 2B %01<sum8>";
                in "\$1 OK %*2x %0<sum8>";
            }

getconfig   {   out "~ \$1 87 %01<sum8>"; 
                in "\$1 OK %*2x %{0|1|2|3|4|5|6|7|8} %0<sum8>"; 
                @mismatch { in "\$1 OK %*2x %?d %0<sum8>";}
            }

#debug
debug       {   ExtraInput = Ignore; out "~ %s %01<sum8>"; in "%*d %*{OK|ER} %*2x %s %0<sum8>";}








